name: GitOps

###
# GitOps - automatic infrastructure management GitHub Action
#
# See https://docs.nubesgen.com/gitops/gitops-quick-start/
# for more information about using GitOps with NubesGen.
###

on:
  push:
    branches:
      - 'env-*'
      - 'main'

jobs:
  manage-infrastructure:
    environment: dev
    runs-on: ubuntu-22.04
    outputs:
      application_name: ${{ steps.infrastructure-deployment.outputs.application_name }}
      resource_group: ${{ steps.infrastructure-deployment.outputs.resource_group }}
      container_registry_name: ${{ steps.infrastructure-deployment.outputs.container_registry_name }}
    steps:
      - name: Apply Terraform configuration
        id: infrastructure-deployment
        uses: microsoft/nubesgen-actions/gitops-apply-terraform@v0.12.1
        env:
          CONTAINER_CERTIFICATE: ${{ secrets.CONTAINER_CERTIFICATE }}
          CONTAINER_CERTIFICATE_PASSWORD: ${{ secrets.CONTAINER_CERTIFICATE_PASSWORD }}
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          tf_storage_account: ${{ secrets.TF_STORAGE_ACCOUNT }}
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '19'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'maven'
      - name: Build application with GraalVM
        run: |
          cd rest-server && mvn -Pnative native:compile
      - name: Build the native (GraalVM) Docker image
        uses: docker/build-push-action@v4
        with:
          push: false
          tags: application/application:${{ github.sha }}
          file: ./rest-server/src/main/docker/Dockerfile.native
          context: ./rest-server/
      - name: Save the Docker image
        run: |
          docker save application/application:${{ github.sha }} | gzip > /tmp/application.tar.gz
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: /tmp/application.tar.gz
          retention-days: 1
  deploy:
    needs: [manage-infrastructure,build]
    runs-on: ubuntu-22.04
    steps:
      - name: Deploy a Docker image to Azure Container Apps
        id: deploy
        uses: microsoft/nubesgen-actions/gitops-deploy-to-container-apps@v0.12.1
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
          resource_group: ${{ needs.manage-infrastructure.outputs.resource_group }}
          container_registry_name: ${{ needs.manage-infrastructure.outputs.container_registry_name }}
          image_name: ${{ needs.manage-infrastructure.outputs.container_registry_name }}.azurecr.io/${{ needs.manage-infrastructure.outputs.application_name }}/${{ needs.manage-infrastructure.outputs.application_name }}:${{ github.sha }}
  display-information:
    needs: [manage-infrastructure,deploy]
    runs-on: ubuntu-22.04
    steps:
      - name: Display Azure infrastructure information
        uses: microsoft/nubesgen-actions/gitops-display-information@v0.12.1
        with:
          application_name: ${{ needs.manage-infrastructure.outputs.application_name }}
          application_url: ${{ needs.deploy.outputs.application_url }}
          resource_group: ${{ needs.manage-infrastructure.outputs.resource_group }}
